const {
    time,
    loadFixture,
} = require("@nomicfoundation/hardhat-network-helpers");
const {expect} = require("chai");
const {bn, getDeltaSupply, numberToWei, packId, unpackId} = require("./shared/utilities");

const opts = {
    gasLimit: 30000000
}

describe("DDL v2", function () {
    async function deployDDLv2() {
        const [owner, otherAccount] = await ethers.getSigners();
        const signer = owner;
        // deploy token1155
        const Token = await ethers.getContractFactory("Token");
        const derivable1155 = await Token.deploy(
            "Test/"
        );
        // deploy pool factory
        const PoolFactory = await ethers.getContractFactory("PoolFactory");
        const poolFactory = await PoolFactory.deploy(owner.address);
        // weth test
        const compiledWETH = require("canonical-weth/build/contracts/WETH9.json")
        const WETH = await new ethers.ContractFactory(compiledWETH.abi, compiledWETH.bytecode, signer);
        // uniswap factory
        const compiledUniswapFactory = require("@uniswap/v2-core/build/UniswapV2Factory.json");
        const UniswapFactory = await new ethers.ContractFactory(compiledUniswapFactory.interface, compiledUniswapFactory.bytecode, signer);
        // uniswap router
        const compiledUniswapRouter = require("@uniswap/v2-periphery/build/UniswapV2Router02");
        const UniswapRouter = await new ethers.ContractFactory(compiledUniswapRouter.abi, compiledUniswapRouter.bytecode, signer);
        // erc20 factory
        const compiledERC20 = require("@uniswap/v2-core/build/ERC20.json");
        const erc20Factory = new ethers.ContractFactory(compiledERC20.abi, compiledERC20.bytecode, signer);
        // setup uniswap
        const busd = await erc20Factory.deploy(numberToWei(100000000000));
        const eth = await erc20Factory.deploy(numberToWei(100000000000));
        const weth = await WETH.deploy();
        const uniswapFactory = await UniswapFactory.deploy(busd.address);
        const uniswapRouter = await UniswapRouter.deploy(uniswapFactory.address, weth.address);
        await busd.approve(uniswapRouter.address, ethers.constants.MaxUint256);
        await eth.approve(uniswapRouter.address, ethers.constants.MaxUint256);
        await uniswapRouter.addLiquidity(
            busd.address,
            eth.address,
            '10480444925500000000000000',
            '6986963283651477901852',
            '0',
            '0',
            owner.address,
            new Date().getTime() + 100000,
            opts
        );
        const pairAddresses = await uniswapFactory.allPairs(0);
        const uniswapPool = new ethers.Contract(pairAddresses, require("@uniswap/v2-core/build/UniswapV2Pair.json").abi, signer);        // deploy Price Library
        
        // const DerivableLibrary = await ethers.getContractFactory("DerivableLibrary", signer);
        // const derivableLibrary = await DerivableLibrary.deploy();
        // await derivableLibrary.deployed();

        const AsymptoticPerpetual = await ethers.getContractFactory("AsymptoticPerpetual");

        const asymptoticPerpetual = await AsymptoticPerpetual.deploy();
        await asymptoticPerpetual.deployed();

        const oracle = bn(1).shl(255).add(bn(300).shl(256-32)).add(derivable1155.address).toHexString()
        const params = {
            // logic: asymptoticPerpetual.address,
            // tokenOracle: pairAddresses,
            // tokenCollateral: eth.address,
            // recipient: owner.address,
            // markPrice: "7788445287819172527008699396495269118",
            // power: 2,
            // a: numberToWei(1),
            // b: numberToWei(1)
            token: derivable1155.address,
            logic: asymptoticPerpetual.address,
            oracle,
            reserveToken: weth.address,
            recipient: owner.address,
            mark: "7788445287819172527008699396495269118",
            k: 5,
            a: numberToWei(1),
            b: numberToWei(1)
        }
        const poolAddress = await poolFactory.computePoolAddress(params);
        await eth.transfer(poolAddress, numberToWei(10));
        await poolFactory.createPool(params);
        const derivablePool = await ethers.getContractAt("Pool", await poolFactory.computePoolAddress(params));

        return {
            owner,
            eth,
            derivablePool,
            derivable1155
        }
    }

    describe("Pool", function () {
        it("Transition", async function () {
            const {owner, eth, derivablePool, derivable1155} = await loadFixture(deployDDLv2);
            await time.increase(100);
            const C_ID = packId(0x30, derivablePool.address);
            console.log("R: ", await eth.balanceOf(derivablePool.address));
            console.log("LP: ", await derivable1155.balanceOf(owner.address, C_ID));
            await derivablePool.transition(
                {R: numberToWei(10), a: numberToWei(0), b: numberToWei(1)},
                owner.address,
                opts
            );
            console.log("R: ", await eth.balanceOf(derivablePool.address));
            console.log("LP: ", await derivable1155.balanceOf(owner.address, C_ID));
        })
    });
})